{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Documents\\\\react-new\\\\src\\\\components\\\\Expenses\\\\Expenses.js\",\n    _s = $RefreshSig$();\n\nimport ExpenseItem from \"./ExpenseItem\";\nimport ExpensesFilter from \"./ExpenseFilter\";\nimport ExpensesList from \"./ExpensesList\";\nimport Card from \"../UI/Card\";\nimport \"./Expenses.css\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Expenses = props => {\n  _s();\n\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\n\n  const changeHandler = selectedYear => {\n    setFilteredYear(selectedYear);\n  };\n\n  const filteredExpenses = props.items.filter(expense => {\n    return expense.date.getFullYear().toString() === filteredYear;\n  }); //Checks if there is an item in selected year\n\n  let expensesContent = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No expenses found.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 26\n  }, this);\n\n  if (filteredExpenses.length > 0) {\n    expensesContent = filteredExpenses.map(expense => /*#__PURE__*/_jsxDEV(ExpenseItem, {\n      title: expense.title,\n      amount: expense.amount,\n      date: expense.date\n    }, expense.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"expenses\",\n    children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n      selected: filteredYear,\n      onChangeFilter: changeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), expensesContent]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Expenses, \"N/aF5O1Q1Yumn7zBaSWVzvWGO2A=\");\n\n_c = Expenses;\nexport default Expenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"sources":["C:/Users/Ben/Documents/react-new/src/components/Expenses/Expenses.js"],"names":["ExpenseItem","ExpensesFilter","ExpensesList","Card","useState","Expenses","props","filteredYear","setFilteredYear","changeHandler","selectedYear","filteredExpenses","items","filter","expense","date","getFullYear","toString","expensesContent","length","map","title","amount","id"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,gBAAP;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,MAAD,CAAhD;;AAEA,QAAMK,aAAa,GAAIC,YAAD,IAAkB;AACtCF,IAAAA,eAAe,CAACE,YAAD,CAAf;AACD,GAFD;;AAIA,QAAMC,gBAAgB,GAAGL,KAAK,CAACM,KAAN,CAAYC,MAAZ,CAAoBC,OAAD,IAAa;AACvD,WAAOA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,OAA0CV,YAAjD;AACD,GAFwB,CAAzB,CAP0B,CAW1B;;AACA,MAAIW,eAAe,gBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAvB;;AAEA,MAAGP,gBAAgB,CAACQ,MAAjB,GAA0B,CAA7B,EAAgC;AAC9BD,IAAAA,eAAe,GAAGP,gBAAgB,CAACS,GAAjB,CAAsBN,OAAD,iBACrC,QAAC,WAAD;AAEE,MAAA,KAAK,EAAEA,OAAO,CAACO,KAFjB;AAGE,MAAA,MAAM,EAAEP,OAAO,CAACQ,MAHlB;AAIE,MAAA,IAAI,EAAER,OAAO,CAACC;AAJhB,OACOD,OAAO,CAACS,EADf;AAAA;AAAA;AAAA;AAAA,YADgB,CAAlB;AAQD;;AAED,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA,4BACE,QAAC,cAAD;AAAgB,MAAA,QAAQ,EAAEhB,YAA1B;AAAwC,MAAA,cAAc,EAAEE;AAAxD;AAAA;AAAA;AAAA;AAAA,YADF,EAEGS,eAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CA/BD;;GAAMb,Q;;KAAAA,Q;AAiCN,eAAeA,QAAf","sourcesContent":["import ExpenseItem from \"./ExpenseItem\";\r\nimport ExpensesFilter from \"./ExpenseFilter\";\r\nimport ExpensesList from \"./ExpensesList\";\r\nimport Card from \"../UI/Card\";\r\nimport \"./Expenses.css\";\r\nimport { useState } from \"react\";\r\n\r\nconst Expenses = (props) => {\r\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\r\n\r\n  const changeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n  };\r\n\r\n  const filteredExpenses = props.items.filter((expense) => {\r\n    return expense.date.getFullYear().toString() === filteredYear;\r\n  });\r\n\r\n  //Checks if there is an item in selected year\r\n  let expensesContent =  <p>No expenses found.</p>;\r\n\r\n  if(filteredExpenses.length > 0) {\r\n    expensesContent = filteredExpenses.map((expense) => (\r\n      <ExpenseItem\r\n        key={expense.id}\r\n        title={expense.title}\r\n        amount={expense.amount}\r\n        date={expense.date}\r\n      />\r\n    ))\r\n  }\r\n\r\n  return (\r\n    <Card className=\"expenses\">\r\n      <ExpensesFilter selected={filteredYear} onChangeFilter={changeHandler} />\r\n      {expensesContent}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Expenses;\r\n"]},"metadata":{},"sourceType":"module"}